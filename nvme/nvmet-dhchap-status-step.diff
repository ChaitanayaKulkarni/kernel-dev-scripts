diff --git a/drivers/nvme/target/fabrics-cmd-auth.c b/drivers/nvme/target/fabrics-cmd-auth.c
index 4a811f3208c4..080d4442c10d 100644
--- a/drivers/nvme/target/fabrics-cmd-auth.c
+++ b/drivers/nvme/target/fabrics-cmd-auth.c
@@ -221,6 +221,8 @@ void nvmet_execute_auth_send(struct nvmet_req *req)
 {
 	struct nvmet_ctrl *ctrl = req->sq->ctrl;
 	struct nvmf_auth_dhchap_success2_data *data;
+	u16 *dhchap_status = &req->sq->dhchap_status;
+	u16 *dhchap_step = &req->sq->dhchap_step;
 	void *d;
 	u32 tl;
 	u16 status;
@@ -242,7 +244,7 @@ void nvmet_execute_auth_send(struct nvmet_req *req)
 	data = d;
 	pr_debug("%s: ctrl %d qid %d type %d id %d step %x\n", __func__,
 		 ctrl->cntlid, req->sq->qid, data->auth_type, data->auth_id,
-		 req->sq->dhchap_step);
+		 *dhchap_step);
 	if (data->auth_type != NVME_AUTH_COMMON_MESSAGES &&
 	    data->auth_type != NVME_AUTH_DHCHAP_MESSAGES)
 		goto done_failure1;
@@ -260,26 +262,24 @@ void nvmet_execute_auth_send(struct nvmet_req *req)
 					goto done_failure1;
 				}
 			}
-			req->sq->dhchap_step = NVME_AUTH_DHCHAP_MESSAGE_NEGOTIATE;
-		} else if (data->auth_id != req->sq->dhchap_step)
+			*dhchap_step = NVME_AUTH_DHCHAP_MESSAGE_NEGOTIATE;
+		} else if (data->auth_id != *dhchap_step)
 			goto done_failure1;
 		/* Validate negotiation parameters */
 		status = nvmet_auth_negotiate(req, d);
 		if (status == 0)
-			req->sq->dhchap_step =
-				NVME_AUTH_DHCHAP_MESSAGE_CHALLENGE;
+			*dhchap_step = NVME_AUTH_DHCHAP_MESSAGE_CHALLENGE;
 		else {
-			req->sq->dhchap_step =
-				NVME_AUTH_DHCHAP_MESSAGE_FAILURE1;
-			req->sq->dhchap_status = status;
+			*dhchap_step = NVME_AUTH_DHCHAP_MESSAGE_FAILURE1;
+			*dhchap_status = status;
 			status = 0;
 		}
 		goto done_kfree;
 	}
-	if (data->auth_id != req->sq->dhchap_step) {
+	if (data->auth_id != *dhchap_step) {
 		pr_debug("%s: ctrl %d qid %d step mismatch (%d != %d)\n",
 			 __func__, ctrl->cntlid, req->sq->qid,
-			 data->auth_id, req->sq->dhchap_step);
+			 data->auth_id, *dhchap_step);
 		goto done_failure1;
 	}
 	if (le16_to_cpu(data->t_id) != req->sq->dhchap_tid) {
@@ -287,10 +287,8 @@ void nvmet_execute_auth_send(struct nvmet_req *req)
 			 __func__, ctrl->cntlid, req->sq->qid,
 			 le16_to_cpu(data->t_id),
 			 req->sq->dhchap_tid);
-		req->sq->dhchap_step =
-			NVME_AUTH_DHCHAP_MESSAGE_FAILURE1;
-		req->sq->dhchap_status =
-			NVME_AUTH_DHCHAP_FAILURE_INCORRECT_PAYLOAD;
+		*dhchap_step = NVME_AUTH_DHCHAP_MESSAGE_FAILURE1;
+		*dhchap_status = NVME_AUTH_DHCHAP_FAILURE_INCORRECT_PAYLOAD;
 		goto done_kfree;
 	}
 
@@ -298,12 +296,10 @@ void nvmet_execute_auth_send(struct nvmet_req *req)
 	case NVME_AUTH_DHCHAP_MESSAGE_REPLY:
 		status = nvmet_auth_reply(req, d);
 		if (status == 0)
-			req->sq->dhchap_step =
-				NVME_AUTH_DHCHAP_MESSAGE_SUCCESS1;
+			*dhchap_step = NVME_AUTH_DHCHAP_MESSAGE_SUCCESS1;
 		else {
-			req->sq->dhchap_step =
-				NVME_AUTH_DHCHAP_MESSAGE_FAILURE1;
-			req->sq->dhchap_status = status;
+			*dhchap_step = NVME_AUTH_DHCHAP_MESSAGE_FAILURE1;
+			*dhchap_status = status;
 			status = 0;
 		}
 		goto done_kfree;
@@ -317,37 +313,35 @@ void nvmet_execute_auth_send(struct nvmet_req *req)
 		if (status) {
 			pr_warn("ctrl %d qid %d: authentication failed (%d)\n",
 				ctrl->cntlid, req->sq->qid, status);
-			req->sq->dhchap_status = status;
+			*dhchap_status = status;
 			req->sq->authenticated = false;
 			status = 0;
 		}
 		goto done_kfree;
 	default:
-		req->sq->dhchap_status =
-			NVME_AUTH_DHCHAP_FAILURE_INCORRECT_MESSAGE;
-		req->sq->dhchap_step =
-			NVME_AUTH_DHCHAP_MESSAGE_FAILURE2;
+		*dhchap_status = NVME_AUTH_DHCHAP_FAILURE_INCORRECT_MESSAGE;
+		*dhchap_step = NVME_AUTH_DHCHAP_MESSAGE_FAILURE2;
 		req->sq->authenticated = false;
 		goto done_kfree;
 	}
 done_failure1:
-	req->sq->dhchap_status = NVME_AUTH_DHCHAP_FAILURE_INCORRECT_MESSAGE;
-	req->sq->dhchap_step = NVME_AUTH_DHCHAP_MESSAGE_FAILURE2;
+	*dhchap_status = NVME_AUTH_DHCHAP_FAILURE_INCORRECT_MESSAGE;
+	*dhchap_step = NVME_AUTH_DHCHAP_MESSAGE_FAILURE2;
 
 done_kfree:
 	kfree(d);
 done:
 	pr_debug("%s: ctrl %d qid %d dhchap status %x step %x\n", __func__,
 		 ctrl->cntlid, req->sq->qid,
-		 req->sq->dhchap_status, req->sq->dhchap_step);
+		 *dhchap_status, *dhchap_step);
 	if (status)
 		pr_debug("%s: ctrl %d qid %d nvme status %x error loc %d\n",
 			 __func__, ctrl->cntlid, req->sq->qid,
 			 status, req->error_loc);
 	req->cqe->result.u64 = 0;
 	nvmet_req_complete(req, status);
-	if (req->sq->dhchap_step != NVME_AUTH_DHCHAP_MESSAGE_SUCCESS2 &&
-	    req->sq->dhchap_step != NVME_AUTH_DHCHAP_MESSAGE_FAILURE2) {
+	if (*dhchap_step != NVME_AUTH_DHCHAP_MESSAGE_SUCCESS2 &&
+	    *dhchap_step != NVME_AUTH_DHCHAP_MESSAGE_FAILURE2) {
 		unsigned long auth_expire_secs = ctrl->kato ? ctrl->kato : 120;
 
 		mod_delayed_work(system_wq, &req->sq->auth_expired_work,
@@ -356,7 +350,7 @@ void nvmet_execute_auth_send(struct nvmet_req *req)
 	}
 	/* Final states, clear up variables */
 	nvmet_auth_sq_free(req->sq);
-	if (req->sq->dhchap_step == NVME_AUTH_DHCHAP_MESSAGE_FAILURE2)
+	if (*dhchap_step == NVME_AUTH_DHCHAP_MESSAGE_FAILURE2)
 		nvmet_ctrl_fatal_error(ctrl);
 }
 
@@ -442,6 +436,8 @@ static void nvmet_auth_failure1(struct nvmet_req *req, void *d, int al)
 void nvmet_execute_auth_receive(struct nvmet_req *req)
 {
 	struct nvmet_ctrl *ctrl = req->sq->ctrl;
+	u16 *dhchap_status = &req->sq->dhchap_status;
+	u16 *dhchap_step = &req->sq->dhchap_step;
 	void *d;
 	u32 al;
 	u16 status;
@@ -456,8 +452,8 @@ void nvmet_execute_auth_receive(struct nvmet_req *req)
 	}
 
 	pr_debug("%s: ctrl %d qid %d step %x\n", __func__,
-		 ctrl->cntlid, req->sq->qid, req->sq->dhchap_step);
-	switch (req->sq->dhchap_step) {
+		 ctrl->cntlid, req->sq->qid, *dhchap_step);
+	switch (*dhchap_step) {
 	case NVME_AUTH_DHCHAP_MESSAGE_CHALLENGE:
 		if (nvmet_auth_challenge(req, d, al) < 0) {
 			pr_warn("ctrl %d qid %d: challenge error (%d)\n",
@@ -465,32 +461,32 @@ void nvmet_execute_auth_receive(struct nvmet_req *req)
 			status = NVME_SC_INTERNAL;
 			break;
 		}
-		req->sq->dhchap_step = NVME_AUTH_DHCHAP_MESSAGE_REPLY;
+		*dhchap_step = NVME_AUTH_DHCHAP_MESSAGE_REPLY;
 		break;
 	case NVME_AUTH_DHCHAP_MESSAGE_SUCCESS1:
 		status = nvmet_auth_success1(req, d, al);
 		if (status) {
-			req->sq->dhchap_status = status;
+			*dhchap_status = status;
 			req->sq->authenticated = false;
 			nvmet_auth_failure1(req, d, al);
 			pr_warn("ctrl %d qid %d: success1 status (%x)\n",
 				ctrl->cntlid, req->sq->qid,
-				req->sq->dhchap_status);
+				*dhchap_status);
 			break;
 		}
-		req->sq->dhchap_step = NVME_AUTH_DHCHAP_MESSAGE_SUCCESS2;
+		*dhchap_step = NVME_AUTH_DHCHAP_MESSAGE_SUCCESS2;
 		break;
 	case NVME_AUTH_DHCHAP_MESSAGE_FAILURE1:
 		req->sq->authenticated = false;
 		nvmet_auth_failure1(req, d, al);
 		pr_warn("ctrl %d qid %d failure1 (%x)\n",
-			ctrl->cntlid, req->sq->qid, req->sq->dhchap_status);
+			ctrl->cntlid, req->sq->qid, *dhchap_status);
 		break;
 	default:
 		pr_warn("ctrl %d qid %d unhandled step (%d)\n",
-			ctrl->cntlid, req->sq->qid, req->sq->dhchap_step);
-		req->sq->dhchap_step = NVME_AUTH_DHCHAP_MESSAGE_FAILURE1;
-		req->sq->dhchap_status = NVME_AUTH_DHCHAP_FAILURE_FAILED;
+			ctrl->cntlid, req->sq->qid, *dhchap_step);
+		*dhchap_step = NVME_AUTH_DHCHAP_MESSAGE_FAILURE1;
+		*dhchap_status = NVME_AUTH_DHCHAP_FAILURE_FAILED;
 		nvmet_auth_failure1(req, d, al);
 		status = 0;
 		break;
diff --git a/drivers/nvme/target/nvmet.h b/drivers/nvme/target/nvmet.h
index 6cf723bc664e..66d8673c3ebf 100644
--- a/drivers/nvme/target/nvmet.h
+++ b/drivers/nvme/target/nvmet.h
@@ -113,7 +113,7 @@ struct nvmet_sq {
 	struct delayed_work	auth_expired_work;
 	u16			dhchap_tid;
 	u16			dhchap_status;
-	int			dhchap_step;
+	u16			dhchap_step;
 	u8			*dhchap_c1;
 	u8			*dhchap_c2;
 	u32			dhchap_s1;
