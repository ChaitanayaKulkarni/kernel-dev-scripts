From 213d45b9deb817ec5c1c5bd32a3a4a9dd6ae3da7 Mon Sep 17 00:00:00 2001
From: Chaitanya Kulkarni <kch@nvidia.com>
Date: Fri, 7 Apr 2023 20:42:54 -0700
Subject: [PATCH 1/4] nvmet: change the type of the ns->readonly

Change the type of the ns->readonly attribute from bool to
enum nvme_ns_wp_state & rename it to write_protect so we can store the
state of the ns write protection.

This is needed to store ns write protection permanent state since in
the next patch we allow user to set the write protection from the
configfs ns attr to export the read-only snapshots such that host should
not change the write protect value when it is set to permanent from
configfs.

Signed-off-by: Chaitanya Kulkarni <kch@nvidia.com>
---
 drivers/nvme/target/admin-cmd.c | 28 +++++++++++++++++-----------
 drivers/nvme/target/core.c      |  3 ++-
 drivers/nvme/target/nvmet.h     |  2 +-
 include/linux/nvme.h            |  2 +-
 4 files changed, 21 insertions(+), 14 deletions(-)

diff --git a/drivers/nvme/target/admin-cmd.c b/drivers/nvme/target/admin-cmd.c
index 39cb570f833d..c7ac338188cd 100644
--- a/drivers/nvme/target/admin-cmd.c
+++ b/drivers/nvme/target/admin-cmd.c
@@ -565,8 +565,17 @@ static void nvmet_execute_identify_ns(struct nvmet_req *req)
 		id->lbaf[0].ms = cpu_to_le16(req->ns->metadata_size);
 	}
 
-	if (req->ns->readonly)
-		id->nsattr |= NVME_NS_ATTR_RO;
+	switch (req->ns->write_protect) {
+	case NVME_NS_NO_WRITE_PROTECT:
+		id->nsattr |= 0;
+		break;
+	case NVME_NS_WRITE_PROTECT:
+		id->nsattr |= (1 << 0);
+		break;
+	default:
+		break;
+	}
+
 done:
 	if (!status)
 		status = nvmet_copy_to_sgl(req, 0, id, sizeof(*id));
@@ -769,13 +778,14 @@ static u16 nvmet_set_feat_write_protect(struct nvmet_req *req)
 	mutex_lock(&subsys->lock);
 	switch (write_protect) {
 	case NVME_NS_WRITE_PROTECT:
-		req->ns->readonly = true;
 		status = nvmet_write_protect_flush_sync(req);
-		if (status)
-			req->ns->readonly = false;
+		if (status == NVME_SC_SUCCESS)
+			req->ns->write_protect = NVME_NS_WRITE_PROTECT;
+		else
+			req->ns->write_protect = NVME_NS_NO_WRITE_PROTECT;
 		break;
 	case NVME_NS_NO_WRITE_PROTECT:
-		req->ns->readonly = false;
+		req->ns->write_protect = NVME_NS_NO_WRITE_PROTECT;
 		status = 0;
 		break;
 	default:
@@ -870,11 +880,7 @@ static u16 nvmet_get_feat_write_protect(struct nvmet_req *req)
 		return result;
 
 	mutex_lock(&subsys->lock);
-	if (req->ns->readonly == true)
-		result = NVME_NS_WRITE_PROTECT;
-	else
-		result = NVME_NS_NO_WRITE_PROTECT;
-	nvmet_set_result(req, result);
+	nvmet_set_result(req, req->ns->write_protect);
 	mutex_unlock(&subsys->lock);
 
 	return 0;
diff --git a/drivers/nvme/target/core.c b/drivers/nvme/target/core.c
index 3935165048e7..e7de857cd3ef 100644
--- a/drivers/nvme/target/core.c
+++ b/drivers/nvme/target/core.c
@@ -689,6 +689,7 @@ struct nvmet_ns *nvmet_ns_alloc(struct nvmet_subsys *subsys, u32 nsid)
 	uuid_gen(&ns->uuid);
 	ns->buffered_io = false;
 	ns->csi = NVME_CSI_NVM;
+	ns->write_protect = NVME_NS_NO_WRITE_PROTECT;
 
 	return ns;
 }
@@ -858,7 +859,7 @@ static inline u16 nvmet_check_ana_state(struct nvmet_port *port,
 
 static inline u16 nvmet_io_cmd_check_access(struct nvmet_req *req)
 {
-	if (unlikely(req->ns->readonly)) {
+	if (unlikely(req->ns->write_protect)) {
 		switch (req->cmd->common.opcode) {
 		case nvme_cmd_read:
 		case nvme_cmd_flush:
diff --git a/drivers/nvme/target/nvmet.h b/drivers/nvme/target/nvmet.h
index dc60a22646f7..a87ee663af14 100644
--- a/drivers/nvme/target/nvmet.h
+++ b/drivers/nvme/target/nvmet.h
@@ -60,7 +60,7 @@ struct nvmet_ns {
 	struct percpu_ref	ref;
 	struct block_device	*bdev;
 	struct file		*file;
-	bool			readonly;
+	enum nvme_ns_wp_state	write_protect;
 	u32			nsid;
 	u32			blksize_shift;
 	loff_t			size;
diff --git a/include/linux/nvme.h b/include/linux/nvme.h
index 779507ac750b..e02f8ebad406 100644
--- a/include/linux/nvme.h
+++ b/include/linux/nvme.h
@@ -1214,7 +1214,7 @@ enum {
 };
 
 /* NVMe Namespace Write Protect State */
-enum {
+enum nvme_ns_wp_state {
 	NVME_NS_NO_WRITE_PROTECT = 0,
 	NVME_NS_WRITE_PROTECT,
 	NVME_NS_WRITE_PROTECT_POWER_CYCLE,
-- 
2.29.0

