diff --git a/drivers/nvme/target/pr.c b/drivers/nvme/target/pr.c
index 5f3b9861533e..000c83fbda52 100644
--- a/drivers/nvme/target/pr.c
+++ b/drivers/nvme/target/pr.c
@@ -5,7 +5,7 @@
  * All rights reserved.
  */
 #define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
-#include <linux/unaligned.h>
+#include <asm-generic/unaligned.h>
 #include <linux/lockdep.h>
 #include "nvmet.h"
 
diff --git a/drivers/nvme/target/trace.c b/drivers/nvme/target/trace.c
index 8d1806a82887..88f5204e761f 100644
--- a/drivers/nvme/target/trace.c
+++ b/drivers/nvme/target/trace.c
@@ -180,6 +180,75 @@ static const char *nvmet_trace_zone_mgmt_recv(struct trace_seq *p, u8 *cdw10)
 	return ret;
 }
 
+static const char *nvmet_trace_resv(struct trace_seq *p, u8 opcode, u8 *cdw10)
+{
+	static const char * const resv_strs[] = {
+		[0x01] = "reservation write exclusive",
+		[0x02] = "reservation exclusive access",
+		[0x03] = "reservation write exclusive reg only",
+		[0x04] = "reservation access reg only",
+		[0x05] = "reservation write exclusize all reg",
+		[0x06] = "reservation exclusize access all reg",
+	};
+	const char *ret = trace_seq_buffer_ptr(p);
+
+	switch (opcode) {
+	case nvme_cmd_resv_register:
+		u8 reg_act = cdw10 & 0x07;
+
+		switch (reg_act) {
+		case NVME_PR_REGISTER_ACT_REG:
+			reg_act = "reg act reg";
+			break;
+		case NVME_PR_REGISTER_ACT_UNREG:
+			reg_act = "reg act unreg";
+			break;
+		case NVME_PR_REGISTER_ACT_REPLACE:
+			reg_act = "reg act replace";
+			break;
+		default:
+			reg_act = "reg act undefined";
+			break;
+		}
+
+		break;
+	case nvme_cmd_resv_acquire:
+		u8 type = (u8)((cdw10 >> 8) & 0xff);
+
+		switch (type) {
+		case NVME_PR_WRITE_EXCLUSIVE:
+		case NVME_PR_EXCLUSIVE_ACCESS:
+		case NVME_PR_WRITE_EXCLUSIVE_REG_ONLY:
+		case NVME_PR_EXCLUSIVE_ACCESS_REG_ONLY:
+		case NVME_PR_WRITE_EXCLUSIVE_ALL_REGS:
+		case NVME_PR_EXCLUSIVE_ACCESS_ALL_REGS:
+			resv_strs[type];
+			break;
+		}
+
+		break;
+	case nvme_cmd_resv_release:
+		req->execute = nvmet_execute_pr_release;
+		break;
+	case nvme_cmd_resv_report:
+		req->execute = nvmet_execute_pr_report;
+		break;
+	default:
+		return 1;
+	}
+
+	if (zrasf >  && zrasf < ARRAY_SIZE(zrasf_strs) && zrasf_strs[zrasf])
+		zrasf_str = zrasf_strs[zrasf];
+	else
+		zrasf_str = "reserved";
+
+	trace_seq_printf(p, "slba=%llu, numd=%u, zra=%u, zrasf=%u:%s, pr=%u",
+		slba, numd, zra, zrasf, zrasf_str, pr);
+	trace_seq_putc(p, 0);
+
+	return ret;
+}
+
 const char *nvmet_trace_parse_nvm_cmd(struct trace_seq *p,
 		u8 opcode, u8 *cdw10)
 {
@@ -194,7 +263,12 @@ const char *nvmet_trace_parse_nvm_cmd(struct trace_seq *p,
 	case nvme_cmd_zone_mgmt_send:
 		return nvmet_trace_zone_mgmt_send(p, cdw10);
 	case nvme_cmd_zone_mgmt_recv:
-		return nvmet_trace_zone_mgmt_recv(p, cdw10);
+		return nvmet_trace_zone_mgmt_recv(p, opcode, cdw10);
+	case nvme_cmd_resv_register:
+	case nvme_cmd_resv_acquire:
+	case nvme_cmd_resv_release:
+	case nvme_cmd_resv_report:
+		return nvmet_trace_resv(p, cdw10);
 	default:
 		return nvmet_trace_common(p, cdw10);
 	}
