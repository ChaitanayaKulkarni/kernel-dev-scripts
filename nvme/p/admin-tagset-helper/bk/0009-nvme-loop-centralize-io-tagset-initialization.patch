From ab2bada13b1d5da16cb28970062d38426b365efb Mon Sep 17 00:00:00 2001
From: Chaitanya Kulkarni <kch@nvidia.com>
Date: Sat, 22 Jan 2022 22:59:38 -0800
Subject: [PATCH 09/11] nvme-loop: centralize io tagset initialization

Signed-off-by: Chaitanya Kulkarni <kch@nvidia.com>
---
 drivers/nvme/host/fabrics.h | 17 +++++++++++++++++
 drivers/nvme/target/loop.c  | 14 +++++---------
 2 files changed, 22 insertions(+), 9 deletions(-)

diff --git a/drivers/nvme/host/fabrics.h b/drivers/nvme/host/fabrics.h
index f7aa4ed17d30..a8c283dfca1a 100644
--- a/drivers/nvme/host/fabrics.h
+++ b/drivers/nvme/host/fabrics.h
@@ -202,6 +202,23 @@ static inline void nvme_ctrl_init_admin_tagset(struct blk_mq_tag_set *set,
 	set->flags = flags;
 }
 
+static inline void nvme_ctrl_init_io_tagset(struct blk_mq_tag_set *set,
+					    void *driver_data, int numa_node,
+					    const struct blk_mq_ops *ops,
+					    unsigned int flags,
+					    unsigned int nr_hw_queues,
+					    unsigned int queue_depth)
+{
+	memset(set, 0, sizeof(*set));
+	set->queue_depth = NVME_AQ_MQ_TAG_DEPTH;
+	set->reserved_tags = NVMF_RESERVED_TAGS;
+	set->driver_data = driver_data;
+	set->numa_node = numa_node;
+	set->nr_hw_queues = nr_hw_queues;
+	set->timeout = NVME_IO_TIMEOUT;
+	set->ops = ops;
+	set->flags = flags;
+}
 
 int nvmf_reg_read32(struct nvme_ctrl *ctrl, u32 off, u32 *val);
 int nvmf_reg_read64(struct nvme_ctrl *ctrl, u32 off, u64 *val);
diff --git a/drivers/nvme/target/loop.c b/drivers/nvme/target/loop.c
index ffc7468f0dfc..381092fdd7a3 100644
--- a/drivers/nvme/target/loop.c
+++ b/drivers/nvme/target/loop.c
@@ -520,17 +520,13 @@ static int nvme_loop_create_io_queues(struct nvme_loop_ctrl *ctrl)
 	if (ret)
 		return ret;
 
-	memset(&ctrl->tag_set, 0, sizeof(ctrl->tag_set));
-	ctrl->tag_set.ops = &nvme_loop_mq_ops;
-	ctrl->tag_set.queue_depth = ctrl->ctrl.opts->queue_size;
-	ctrl->tag_set.reserved_tags = NVMF_RESERVED_TAGS;
-	ctrl->tag_set.numa_node = ctrl->ctrl.numa_node;
-	ctrl->tag_set.flags = BLK_MQ_F_SHOULD_MERGE;
+	nvme_ctrl_init_io_tagset(&ctrl->tag_set, ctrl, ctrl->ctrl.numa_node,
+				 &nvme_loop_mq_ops, BLK_MQ_F_SHOULD_MERGE,
+				 ctrl->ctrl.queue_count - 1,
+				 ctrl->ctrl.opts->queue_size);
+
 	ctrl->tag_set.cmd_size = sizeof(struct nvme_loop_iod) +
 		NVME_INLINE_SG_CNT * sizeof(struct scatterlist);
-	ctrl->tag_set.driver_data = ctrl;
-	ctrl->tag_set.nr_hw_queues = ctrl->ctrl.queue_count - 1;
-	ctrl->tag_set.timeout = NVME_IO_TIMEOUT;
 	ctrl->ctrl.tagset = &ctrl->tag_set;
 
 	ret = blk_mq_alloc_tag_set(&ctrl->tag_set);
-- 
2.29.0

