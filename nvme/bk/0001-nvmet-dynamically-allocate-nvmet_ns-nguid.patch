From 778ca0e357335806e4fd4b25b3f6966ada467622 Mon Sep 17 00:00:00 2001
From: Chaitanya Kulkarni <kch@nvidia.com>
Date: Sun, 30 Apr 2023 21:12:49 -0700
Subject: [PATCH 1/4] nvmet: dynamically allocate nvmet_ns->nguid

The nvmet_ns struct is critical to I/O operations in each backend bdev
and ns, but its static nguid array is not accessed in the fast path.
This means that pulling all the memory for the array on each access
is inefficient.

This patch dynamically allocates the nvmet_ns->nguid array, reducing the
size of the nvmet_ns struct. This optimization should improve
performance by avoiding unnecessary memory allocation. For allocation
of nguid with kzalloc() use same policy GFP_KERNEL that is used to
allocate nvmet_ns struct iself.

Before the patch, the size of the nvmet_ns struct was 456. After the
patch, the size of the struct decreased to 448.

Signed-off-by: Chaitanya Kulkarni <kch@nvidia.com>
---
 drivers/nvme/target/admin-cmd.c | 6 +++---
 drivers/nvme/target/configfs.c  | 4 ++--
 drivers/nvme/target/core.c      | 7 +++++++
 drivers/nvme/target/nvmet.h     | 2 +-
 4 files changed, 13 insertions(+), 6 deletions(-)

diff --git a/drivers/nvme/target/admin-cmd.c b/drivers/nvme/target/admin-cmd.c
index 39cb570f833d..21129ad15320 100644
--- a/drivers/nvme/target/admin-cmd.c
+++ b/drivers/nvme/target/admin-cmd.c
@@ -551,7 +551,7 @@ static void nvmet_execute_identify_ns(struct nvmet_req *req)
 	id->nmic = NVME_NS_NMIC_SHARED;
 	id->anagrpid = cpu_to_le32(req->ns->anagrpid);
 
-	memcpy(&id->nguid, &req->ns->nguid, sizeof(id->nguid));
+	memcpy(&id->nguid, req->ns->nguid, sizeof(id->nguid));
 
 	id->lbaf[0].ds = req->ns->blksize_shift;
 
@@ -646,10 +646,10 @@ static void nvmet_execute_identify_desclist(struct nvmet_req *req)
 		if (status)
 			goto out;
 	}
-	if (memchr_inv(req->ns->nguid, 0, sizeof(req->ns->nguid))) {
+	if (memchr_inv(req->ns->nguid, 0, NVME_NIDT_NGUID_LEN)) {
 		status = nvmet_copy_ns_identifier(req, NVME_NIDT_NGUID,
 						  NVME_NIDT_NGUID_LEN,
-						  &req->ns->nguid, &off);
+						  req->ns->nguid, &off);
 		if (status)
 			goto out;
 	}
diff --git a/drivers/nvme/target/configfs.c b/drivers/nvme/target/configfs.c
index 907143870da5..463ae31d5d71 100644
--- a/drivers/nvme/target/configfs.c
+++ b/drivers/nvme/target/configfs.c
@@ -444,7 +444,7 @@ CONFIGFS_ATTR(nvmet_ns_, device_uuid);
 
 static ssize_t nvmet_ns_device_nguid_show(struct config_item *item, char *page)
 {
-	return sprintf(page, "%pUb\n", &to_nvmet_ns(item)->nguid);
+	return sprintf(page, "%pUb\n", to_nvmet_ns(item)->nguid);
 }
 
 static ssize_t nvmet_ns_device_nguid_store(struct config_item *item,
@@ -480,7 +480,7 @@ static ssize_t nvmet_ns_device_nguid_store(struct config_item *item,
 			p++;
 	}
 
-	memcpy(&ns->nguid, nguid, sizeof(nguid));
+	memcpy(ns->nguid, nguid, sizeof(nguid));
 out_unlock:
 	mutex_unlock(&subsys->lock);
 	return ret ? ret : count;
diff --git a/drivers/nvme/target/core.c b/drivers/nvme/target/core.c
index f66ed13d7c11..cc95ba3c2835 100644
--- a/drivers/nvme/target/core.c
+++ b/drivers/nvme/target/core.c
@@ -665,6 +665,7 @@ void nvmet_ns_free(struct nvmet_ns *ns)
 	up_write(&nvmet_ana_sem);
 
 	kfree(ns->device_path);
+	kfree(ns->nguid);
 	kfree(ns);
 }
 
@@ -676,6 +677,12 @@ struct nvmet_ns *nvmet_ns_alloc(struct nvmet_subsys *subsys, u32 nsid)
 	if (!ns)
 		return NULL;
 
+	ns->nguid = kzalloc(NVME_NIDT_NGUID_LEN, GFP_KERNEL);
+	if (!ns) {
+		kfree(ns);
+		return NULL;
+	}
+
 	init_completion(&ns->disable_done);
 
 	ns->nsid = nsid;
diff --git a/drivers/nvme/target/nvmet.h b/drivers/nvme/target/nvmet.h
index c50146085fb5..4c2a20dc9eed 100644
--- a/drivers/nvme/target/nvmet.h
+++ b/drivers/nvme/target/nvmet.h
@@ -64,7 +64,7 @@ struct nvmet_ns {
 	u32			nsid;
 	u32			blksize_shift;
 	loff_t			size;
-	u8			nguid[16];
+	u8                      *nguid;
 	uuid_t			uuid;
 	u32			anagrpid;
 
-- 
2.40.0

