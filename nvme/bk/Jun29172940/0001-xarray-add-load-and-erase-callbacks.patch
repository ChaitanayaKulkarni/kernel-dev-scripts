From 24c66239ab2982d91bfe92a03a9dfed34dcf1bb5 Mon Sep 17 00:00:00 2001
From: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
Date: Fri, 26 Jun 2020 20:17:10 -0700
Subject: [PATCH 1/2] xarray: add load and erase callbacks

Signed-off-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
---
 include/linux/xarray.h |  3 +++
 lib/xarray.c           | 57 ++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 60 insertions(+)

diff --git a/include/linux/xarray.h b/include/linux/xarray.h
index b4d70e7568b2..a25fd58d0f56 100644
--- a/include/linux/xarray.h
+++ b/include/linux/xarray.h
@@ -345,8 +345,11 @@ struct xarray {
 #define DEFINE_XARRAY_ALLOC1(name) DEFINE_XARRAY_FLAGS(name, XA_FLAGS_ALLOC1)
 
 void *xa_load(struct xarray *, unsigned long index);
+void *xa_load_cb(struct xarray *xa, unsigned long index, bool (*cb)(void *),
+		bool *result);
 void *xa_store(struct xarray *, unsigned long index, void *entry, gfp_t);
 void *xa_erase(struct xarray *, unsigned long index);
+void *xa_erase_cb(struct xarray *xa, unsigned long index, void (*cb)(void *));
 void *xa_store_range(struct xarray *, unsigned long first, unsigned long last,
 			void *entry, gfp_t);
 bool xa_get_mark(struct xarray *, unsigned long index, xa_mark_t);
diff --git a/lib/xarray.c b/lib/xarray.c
index e9e641d3c0c3..4c317660c791 100644
--- a/lib/xarray.c
+++ b/lib/xarray.c
@@ -1312,6 +1312,36 @@ void *xa_load(struct xarray *xa, unsigned long index)
 }
 EXPORT_SYMBOL(xa_load);
 
+/**
+ * xa_load() - Load an entry from an XArray.
+ * @xa: XArray.
+ * @index: index into array.
+ * @cb: callback needs to be called under lock.
+ *
+ * Context: Any context.  Takes and releases the RCU lock.
+ * Return: The entry at @index in @xa.
+ */
+void *xa_load_cb(struct xarray *xa, unsigned long index, bool (*cb)(void *),
+		bool *result)
+{
+       XA_STATE(xas, xa, index);
+       void *entry;
+
+       *result = false;
+       rcu_read_lock();
+       do {
+               entry = xas_load(&xas);
+               if (xa_is_zero(entry))
+                       entry = NULL;
+       } while (xas_retry(&xas, entry));
+       if (entry && cb)
+               *result = cb(entry);
+       rcu_read_unlock();
+
+       return entry;
+}
+EXPORT_SYMBOL(xa_load_cb);
+
 static void *xas_result(struct xa_state *xas, void *curr)
 {
 	if (xa_is_zero(curr))
@@ -1364,6 +1394,33 @@ void *xa_erase(struct xarray *xa, unsigned long index)
 }
 EXPORT_SYMBOL(xa_erase);
 
+/**
+ * xa_erase_cb() - Erase this entry from the XArray.
+ * @xa: XArray.
+ * @index: Index of entry.
+ * @cb: callback needs to be called under lock.
+ *
+ * After this function returns, loading from @index will return %NULL.
+ * If the index is part of a multi-index entry, all indices will be erased
+ * and none of the entries will be part of a multi-index entry.
+ *
+ * Context: Any context.  Takes and releases the xa_lock.
+ * Return: The entry which used to be at this index.
+ */
+void *xa_erase_cb(struct xarray *xa, unsigned long index, void (*cb)(void *))
+{
+       void *entry;
+
+       xa_lock(xa);
+       entry = __xa_erase(xa, index);
+       if (entry && cb)
+               cb(entry);
+       xa_unlock(xa);
+
+       return entry;
+}
+EXPORT_SYMBOL(xa_erase_cb);
+
 /**
  * __xa_store() - Store this entry in the XArray.
  * @xa: XArray.
-- 
2.26.0

