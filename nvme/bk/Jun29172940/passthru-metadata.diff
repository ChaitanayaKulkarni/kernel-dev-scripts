diff --git a/drivers/nvme/host/core.c b/drivers/nvme/host/core.c
index e406c3cf55bc..c95b0bb7d922 100644
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@ -1065,6 +1065,22 @@ void nvme_execute_passthru_rq(struct request *rq)
 }
 EXPORT_SYMBOL_NS_GPL(nvme_execute_passthru_rq, NVME_TARGET_PASSTHRU);
 
+static int nvme_user_io_cmd(struct nvme_user_io &io)
+{
+	int ret;
+
+	switch (io.opcode) {
+	case nvme_cmd_write:
+	case nvme_cmd_read:
+	case nvme_cmd_compare:
+		ret = 0;
+	default:
+		ret = -EINVAL;
+	}
+
+	return ret;
+}
+
 static int nvme_submit_user_cmd(struct request_queue *q,
 		struct nvme_command *cmd, void __user *ubuffer,
 		unsigned bufflen, void __user *meta_buffer, unsigned meta_len,
@@ -1484,15 +1500,6 @@ static int nvme_submit_io(struct nvme_ns *ns, struct nvme_user_io __user *uio)
 	if (io.flags)
 		return -EINVAL;
 
-	switch (io.opcode) {
-	case nvme_cmd_write:
-	case nvme_cmd_read:
-	case nvme_cmd_compare:
-		break;
-	default:
-		return -EINVAL;
-	}
-
 	length = (io.nblocks + 1) << ns->lba_shift;
 	meta_len = (io.nblocks + 1) * ns->ms;
 	metadata = nvme_to_user_ptr(io.metadata);
diff --git a/drivers/nvme/target/io-cmd-bdev.c b/drivers/nvme/target/io-cmd-bdev.c
index 3dd6f566a240..6c2d9714aac8 100644
--- a/drivers/nvme/target/io-cmd-bdev.c
+++ b/drivers/nvme/target/io-cmd-bdev.c
@@ -170,7 +170,7 @@ static void nvmet_bio_done(struct bio *bio)
 }
 
 #ifdef CONFIG_BLK_DEV_INTEGRITY
-static int nvmet_bdev_alloc_bip(struct nvmet_req *req, struct bio *bio,
+int nvmet_bdev_alloc_bip(struct nvmet_req *req, struct bio *bio,
 				struct sg_mapping_iter *miter)
 {
 	struct blk_integrity *bi;
@@ -217,7 +217,7 @@ static int nvmet_bdev_alloc_bip(struct nvmet_req *req, struct bio *bio,
 	return 0;
 }
 #else
-static int nvmet_bdev_alloc_bip(struct nvmet_req *req, struct bio *bio,
+int nvmet_bdev_alloc_bip(struct nvmet_req *req, struct bio *bio,
 				struct sg_mapping_iter *miter)
 {
 	return -EINVAL;
diff --git a/drivers/nvme/target/nvmet.h b/drivers/nvme/target/nvmet.h
index 47ee3fb193bd..75241150595c 100644
--- a/drivers/nvme/target/nvmet.h
+++ b/drivers/nvme/target/nvmet.h
@@ -599,4 +599,6 @@ static inline bool nvmet_ns_has_pi(struct nvmet_ns *ns)
 	return ns->pi_type && ns->metadata_size == sizeof(struct t10_pi_tuple);
 }
 
+int nvmet_bdev_alloc_bip(struct nvmet_req *req, struct bio *bio,
+			 struct sg_mapping_iter *miter);
 #endif /* _NVMET_H */
diff --git a/drivers/nvme/target/passthru.c b/drivers/nvme/target/passthru.c
index 8bd7f656e240..958a33a12be3 100644
--- a/drivers/nvme/target/passthru.c
+++ b/drivers/nvme/target/passthru.c
@@ -108,40 +108,6 @@ static u16 nvmet_passthru_override_id_ctrl(struct nvmet_req *req)
 	return status;
 }
 
-static u16 nvmet_passthru_override_id_ns(struct nvmet_req *req)
-{
-	u16 status = NVME_SC_SUCCESS;
-	struct nvme_id_ns *id;
-	int i;
-
-	id = kzalloc(sizeof(*id), GFP_KERNEL);
-	if (!id)
-		return NVME_SC_INTERNAL;
-
-	status = nvmet_copy_from_sgl(req, 0, id, sizeof(struct nvme_id_ns));
-	if (status)
-		goto out_free;
-
-	for (i = 0; i < (id->nlbaf + 1); i++)
-		if (id->lbaf[i].ms)
-			memset(&id->lbaf[i], 0, sizeof(id->lbaf[i]));
-
-	id->flbas = id->flbas & ~(1 << 4);
-
-	/*
-	 * Presently the NVMEof target code does not support sending
-	 * metadata, so we must disable it here. This should be updated
-	 * once target starts supporting metadata.
-	 */
-	id->mc = 0;
-
-	status = nvmet_copy_to_sgl(req, 0, id, sizeof(*id));
-
-out_free:
-	kfree(id);
-	return status;
-}
-
 static void nvmet_passthru_execute_cmd_work(struct work_struct *w)
 {
 	struct nvmet_req *req = container_of(w, struct nvmet_req, p.work);
@@ -152,16 +118,9 @@ static void nvmet_passthru_execute_cmd_work(struct work_struct *w)
 
 	status = nvme_req(rq)->status;
 	if (status == NVME_SC_SUCCESS &&
-	    req->cmd->common.opcode == nvme_admin_identify) {
-		switch (req->cmd->identify.cns) {
-		case NVME_ID_CNS_CTRL:
-			nvmet_passthru_override_id_ctrl(req);
-			break;
-		case NVME_ID_CNS_NS:
-			nvmet_passthru_override_id_ns(req);
-			break;
-		}
-	}
+	    req->cmd->common.opcode == nvme_admin_identify &&
+	    req->cmd->identify.cns == NVME_ID_CNS_CTRL)
+		nvmet_passthru_override_id_ctrl(req);
 
 	req->cqe->result = nvme_req(rq)->result;
 	nvmet_req_complete(req, status);
@@ -180,7 +139,9 @@ static void nvmet_passthru_req_done(struct request *rq,
 
 static int nvmet_passthru_map_sg(struct nvmet_req *req, struct request *rq)
 {
+	struct sg_mapping_iter prot_miter;
 	int sg_cnt = req->sg_cnt;
+	unsigned int iter_flags;
 	struct scatterlist *sg;
 	int op_flags = 0;
 	struct bio *bio;
@@ -195,6 +156,9 @@ static int nvmet_passthru_map_sg(struct nvmet_req *req, struct request *rq)
 	bio->bi_end_io = bio_put;
 	bio->bi_opf = req_op(rq) | op_flags;
 
+	if (req->metadata_len)
+		sg_miter_start(&prot_miter, req->metadata_sg,
+			       req->metadata_sg_cnt, iter_flags);
 	for_each_sg(req->sg, sg, req->sg_cnt, i) {
 		if (bio_add_pc_page(rq->q, bio, sg_page(sg), sg->length,
 				    sg->offset) < sg->length) {
@@ -204,6 +168,14 @@ static int nvmet_passthru_map_sg(struct nvmet_req *req, struct request *rq)
 		sg_cnt--;
 	}
 
+	if (req->metadata_len) {
+		ret = nvmet_bdev_alloc_bip(req, bio, &prot_miter);
+		if (unlikely(ret)) {
+			bio_io_error(bio);
+			return ret;
+		}
+	}
+
 	ret = blk_rq_append_bio(rq, &bio);
 	if (unlikely(ret)) {
 		bio_put(bio);
