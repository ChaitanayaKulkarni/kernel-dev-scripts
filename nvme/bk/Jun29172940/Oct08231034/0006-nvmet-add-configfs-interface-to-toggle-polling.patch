From 4ac5228b7c4c8b2ed2079bd6adeb5c1a32165251 Mon Sep 17 00:00:00 2001
From: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
Date: Tue, 8 Oct 2019 17:57:04 -0700
Subject: [PATCH 6/6] nvmet: add configfs interface to toggle polling

This patch adds a new configfs ns attribute so that user can optionally
enable/disable polling for the bdev and file-backed namespace.

Signed-off-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
---
 drivers/nvme/target/configfs.c    | 39 +++++++++++++++++++++++++++++++
 drivers/nvme/target/core.c        | 17 ++++++++++++++
 drivers/nvme/target/io-cmd-bdev.c |  3 +--
 drivers/nvme/target/io-cmd-file.c | 14 +++++++----
 drivers/nvme/target/nvmet.h       |  2 ++
 5 files changed, 69 insertions(+), 6 deletions(-)

diff --git a/drivers/nvme/target/configfs.c b/drivers/nvme/target/configfs.c
index 98613a45bd3b..68901ee7df59 100644
--- a/drivers/nvme/target/configfs.c
+++ b/drivers/nvme/target/configfs.c
@@ -545,6 +545,44 @@ static ssize_t nvmet_ns_buffered_io_store(struct config_item *item,
 
 CONFIGFS_ATTR(nvmet_ns_, buffered_io);
 
+static ssize_t nvmet_ns_poll_show(struct config_item *item, char *page)
+{
+	return sprintf(page, "%d\n", to_nvmet_ns(item)->poll);
+}
+
+static ssize_t nvmet_ns_poll_store(struct config_item *item,
+		const char *page, size_t count)
+{
+	struct nvmet_ns *ns = to_nvmet_ns(item);
+	struct nvmet_subsys *subsys = ns->subsys;
+	bool is_poll;
+	int ret = 0;
+
+	if (strtobool(page, &is_poll))
+		return -EINVAL;
+
+	mutex_lock(&subsys->lock);
+	/*
+	 * Polling can be enabled only after when ns is configured with bdev or
+	 * file, i.e. enabled at least once so that ns->[bdev | file] is valid.
+	 */
+
+	/* should we check for ns->enabled ? */
+	if (!nvmet_ns_poll_allowed(ns)) {
+		ret = -EINVAL;
+		ns->poll = false;
+		pr_err("polling is not supported.\n");
+		goto out;
+	}
+
+	ns->poll = is_poll;
+out:
+	mutex_unlock(&subsys->lock);
+	return ret ? ret : count;
+}
+
+CONFIGFS_ATTR(nvmet_ns_, poll);
+
 static struct configfs_attribute *nvmet_ns_attrs[] = {
 	&nvmet_ns_attr_device_path,
 	&nvmet_ns_attr_device_nguid,
@@ -552,6 +590,7 @@ static struct configfs_attribute *nvmet_ns_attrs[] = {
 	&nvmet_ns_attr_ana_grpid,
 	&nvmet_ns_attr_enable,
 	&nvmet_ns_attr_buffered_io,
+	&nvmet_ns_attr_poll,
 #ifdef CONFIG_PCI_P2PDMA
 	&nvmet_ns_attr_p2pmem,
 #endif
diff --git a/drivers/nvme/target/core.c b/drivers/nvme/target/core.c
index 3e616c0279c6..2c10c0b49132 100644
--- a/drivers/nvme/target/core.c
+++ b/drivers/nvme/target/core.c
@@ -654,10 +654,27 @@ struct nvmet_ns *nvmet_ns_alloc(struct nvmet_subsys *subsys, u32 nsid)
 
 	uuid_gen(&ns->uuid);
 	ns->buffered_io = false;
+	ns->poll = false;
 
 	return ns;
 }
 
+bool nvmet_ns_poll_allowed(struct nvmet_ns *ns)
+{
+	bool ret = false;
+
+	if (ns->bdev) {
+		struct request_queue *q = bdev_get_queue(ns->bdev);
+
+		ret = test_bit(QUEUE_FLAG_POLL, &q->queue_flags);
+	}
+
+	if (ns->file)
+		ret = ns->file->f_op->iopoll ? true : false;
+
+	return ret;
+}
+
 static void nvmet_update_sq_head(struct nvmet_req *req)
 {
 	if (req->sq->size) {
diff --git a/drivers/nvme/target/io-cmd-bdev.c b/drivers/nvme/target/io-cmd-bdev.c
index ebc32b3445c4..ce4ba53113e5 100644
--- a/drivers/nvme/target/io-cmd-bdev.c
+++ b/drivers/nvme/target/io-cmd-bdev.c
@@ -160,7 +160,6 @@ static void nvmet_bdev_io_poll_work(struct work_struct *w)
 
 static void nvmet_bdev_execute_rw(struct nvmet_req *req)
 {
-	struct request_queue *q = bdev_get_queue(req->ns->bdev);
 	int sg_cnt = req->sg_cnt;
 	struct bio *bio;
 	struct scatterlist *sg;
@@ -217,7 +216,6 @@ static void nvmet_bdev_execute_rw(struct nvmet_req *req)
 		sg_cnt--;
 	}
 
-	req->b.polled = test_bit(QUEUE_FLAG_POLL, &q->queue_flags);
 	if (req->b.polled) {
 		init_completion(&req->b.waiting);
 		INIT_WORK(&req->b.work, nvmet_bdev_io_poll_work);
@@ -344,6 +342,7 @@ u16 nvmet_bdev_parse_io_cmd(struct nvmet_req *req)
 	switch (cmd->common.opcode) {
 	case nvme_cmd_read:
 	case nvme_cmd_write:
+		req->b.polled = req->ns->poll;
 		req->execute = nvmet_bdev_execute_rw;
 		req->data_len = nvmet_rw_len(req);
 		return 0;
diff --git a/drivers/nvme/target/io-cmd-file.c b/drivers/nvme/target/io-cmd-file.c
index 0f4483c8f5a3..cc97e74f135e 100644
--- a/drivers/nvme/target/io-cmd-file.c
+++ b/drivers/nvme/target/io-cmd-file.c
@@ -206,16 +206,18 @@ static bool nvmet_file_execute_io(struct nvmet_req *req, int ki_flags)
 	 */
 	if (!(ki_flags & IOCB_NOWAIT)) {
 		iocb->ki_complete = nvmet_file_io_done;
-		req->f.polled = true;
-		init_completion(&req->f.waiting);
-		INIT_WORK(&req->f.work, nvmet_file_io_poll_work);
+		if (req->ns->poll) {
+			req->f.polled = true;
+			init_completion(&req->f.waiting);
+			INIT_WORK(&req->f.work, nvmet_file_io_poll_work);
+		}
 	}
 
 	ret = nvmet_file_submit_bvec(req, pos, bv_cnt, total_len, ki_flags);
 
 	switch (ret) {
 	case -EIOCBQUEUED:
-		if (iocb->ki_complete && iocb->ki_filp->f_op->iopoll)
+		if (req->f.polled)
 			queue_work(io_poll_wq, &req->f.work);
 		return true;
 	case -EAGAIN:
@@ -393,6 +395,10 @@ u16 nvmet_file_parse_io_cmd(struct nvmet_req *req)
 	switch (cmd->common.opcode) {
 	case nvme_cmd_read:
 	case nvme_cmd_write:
+		/*
+		 * We can't use/assign ns->poll here, since we poll only for
+		 * a particular, case see nvmet_file_execute_io().
+		 */
 		req->f.polled = false;
 		req->execute = nvmet_file_execute_rw;
 		req->data_len = nvmet_rw_len(req);
diff --git a/drivers/nvme/target/nvmet.h b/drivers/nvme/target/nvmet.h
index ccda1f40b29b..d887da79b003 100644
--- a/drivers/nvme/target/nvmet.h
+++ b/drivers/nvme/target/nvmet.h
@@ -76,6 +76,7 @@ struct nvmet_ns {
 
 	int			use_p2pmem;
 	struct pci_dev		*p2p_dev;
+	bool			poll;
 };
 
 static inline struct nvmet_ns *to_nvmet_ns(struct config_item *item)
@@ -495,6 +496,7 @@ void nvmet_file_ns_disable(struct nvmet_ns *ns);
 u16 nvmet_bdev_flush(struct nvmet_req *req);
 u16 nvmet_file_flush(struct nvmet_req *req);
 void nvmet_ns_changed(struct nvmet_subsys *subsys, u32 nsid);
+bool nvmet_ns_poll_allowed(struct nvmet_ns *ns);
 
 static inline u32 nvmet_rw_len(struct nvmet_req *req)
 {
-- 
2.22.1

