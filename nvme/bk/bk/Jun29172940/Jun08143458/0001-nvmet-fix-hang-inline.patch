From 05531fda597db7a4881e968d0e118e601a2a3259 Mon Sep 17 00:00:00 2001
From: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
Date: Sun, 7 Jun 2020 23:14:53 -0700
Subject: [PATCH] nvmet: fix hang inline

Signed-off-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
---
 drivers/nvme/target/core.c | 26 +++++++++++++++++++++-----
 1 file changed, 21 insertions(+), 5 deletions(-)

diff --git a/drivers/nvme/target/core.c b/drivers/nvme/target/core.c
index 6392bcd30bd7..3be46bda1f2c 100644
--- a/drivers/nvme/target/core.c
+++ b/drivers/nvme/target/core.c
@@ -136,14 +136,30 @@ static void nvmet_async_events_process(struct nvmet_ctrl *ctrl, u16 status)
 
 	mutex_lock(&ctrl->lock);
 	while (ctrl->nr_async_event_cmds && !list_empty(&ctrl->async_events)) {
-		aen = list_first_entry(&ctrl->async_events,
-				       struct nvmet_async_event, entry);
+		aen = list_first_entry_or_null(&ctrl->async_events,
+				struct nvmet_async_event, entry);
 		req = ctrl->async_event_cmds[--ctrl->nr_async_event_cmds];
-		if (status == 0)
+		if (status == 0 && aen) {
 			nvmet_set_result(req, nvmet_async_event_result(aen));
+			if (aen)
+				list_del(&aen->entry);
+			kfree(aen);
 
-		list_del(&aen->entry);
-		kfree(aen);
+			trace_nvmet_async_event(ctrl, req->cqe->result.u32);
+			nvmet_req_complete(req, status);
+			mutex_lock(&ctrl->lock);
+		}
+	}
+	/*
+	 * When status != 0 we are called from nvmet_sq_destroy() context that
+	 * means we need to complete remaining host posted outstanding requests
+	 * in ctrl->nr_async_cmds[] which doesn't have 1:1 mapping onto
+	 * ctrl->async_event list in order to put the reference on the req(s)
+	 * which was taken by outstanding req(s) so that we can make progress in
+	 * nvmet_sq_destroy()-> wait_for completion(&sq->free_done).
+	 */
+       while (status != 0 && ctrl->nr_async_event_cmds) {
+               req = ctrl->async_event_cmds[--ctrl->nr_async_event_cmds];
 
 		mutex_unlock(&ctrl->lock);
 		trace_nvmet_async_event(ctrl, req->cqe->result.u32);
-- 
2.22.1

