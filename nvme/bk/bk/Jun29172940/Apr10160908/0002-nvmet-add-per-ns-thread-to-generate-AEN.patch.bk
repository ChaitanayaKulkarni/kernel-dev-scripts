From be36a36420c85a04a0379039f026fa1822f5c77d Mon Sep 17 00:00:00 2001
From: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
Date: Tue, 7 Apr 2020 15:04:50 -0700
Subject: [PATCH V3 2/2] nvmet: add per ns thread to generate AEN

The change of size detection on the target should generate an AEN to
the host. Right now there is no mechanism that allows us to add
callbacks for the block and file backend so that we will get the
notification for change of the size for block device and file backend.
This patch adds global maintenance thread that checks for the size
change and generates AEN when needed.

Signed-off-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
---
 drivers/nvme/target/admin-cmd.c   |  7 ++-
 drivers/nvme/target/configfs.c    | 39 ++++++++++++++
 drivers/nvme/target/core.c        | 88 ++++++++++++++++++++++++++++++-
 drivers/nvme/target/io-cmd-bdev.c |  9 +++-
 drivers/nvme/target/io-cmd-file.c | 15 ++++--
 drivers/nvme/target/nvmet.h       | 18 ++++++-
 6 files changed, 163 insertions(+), 13 deletions(-)

diff --git a/drivers/nvme/target/admin-cmd.c b/drivers/nvme/target/admin-cmd.c
index 4c79aa804887..a3bc2987c72a 100644
--- a/drivers/nvme/target/admin-cmd.c
+++ b/drivers/nvme/target/admin-cmd.c
@@ -486,10 +486,9 @@ static void nvmet_execute_identify_ns(struct nvmet_req *req)
 	if (!ns)
 		goto done;
 
-	if (ns->bdev)
-		nvmet_bdev_ns_revalidate(ns);
-	else
-		nvmet_file_ns_revalidate(ns);
+	mutex_lock(&ns->subsys->lock);
+	nvmet_ns_revalidate(ns);
+	mutex_unlock(&ns->subsys->lock);
 
 	/*
 	 * nuse = ncap = nsze isn't always true, but we have no way to find
diff --git a/drivers/nvme/target/configfs.c b/drivers/nvme/target/configfs.c
index 58cabd7b6fc5..3246ca9ab945 100644
--- a/drivers/nvme/target/configfs.c
+++ b/drivers/nvme/target/configfs.c
@@ -1046,12 +1046,51 @@ static struct config_group *nvmet_subsys_make(struct config_group *group,
 	return &subsys->group;
 }
 
+static ssize_t nvmet_control_group_control_resize_refresh_show(
+		struct config_item *item, char *page)
+{
+
+	return snprintf(page, PAGE_SIZE, "%u\n",
+			to_nvmet_control(item)->enable);
+}
+
+static ssize_t nvmet_control_group_control_resize_refresh_store(
+		struct config_item *item, const char *page, size_t count)
+{
+	struct nvmet_control *control = to_nvmet_control(item);
+	ssize_t ret;
+	bool enable;
+
+	ret = kstrtobool(page, &enable);
+	if (ret < 0)
+		return ret;
+
+	control->enable = enable;
+
+	if (control->enable)
+		if (!nvmet_enable_ns_resize_monitor())
+			ret = -EINVAL;
+	} else {
+		if (!nvmet_disable_ns_resize_monitor())
+			ret = -EINVAL;
+	}
+	return ret ? ret : count;
+}
+
+CONFIGFS_ATTR(nvmet_control_group_, control_resize_refresh);
+
+static struct configfs_attribute *nvmet_control_group_attrs[] = {
+	&nvmet_control_group_attr_control_resize_refresh,
+	NULL,
+};
+
 static struct configfs_group_operations nvmet_subsystems_group_ops = {
 	.make_group		= nvmet_subsys_make,
 };
 
 static const struct config_item_type nvmet_subsystems_type = {
 	.ct_group_ops		= &nvmet_subsystems_group_ops,
+	.ct_attrs		= nvmet_control_group_attrs,
 	.ct_owner		= THIS_MODULE,
 };
 
diff --git a/drivers/nvme/target/core.c b/drivers/nvme/target/core.c
index b685f99d56a1..869d75688fb9 100644
--- a/drivers/nvme/target/core.c
+++ b/drivers/nvme/target/core.c
@@ -9,12 +9,14 @@
 #include <linux/rculist.h>
 #include <linux/pci-p2pdma.h>
 #include <linux/scatterlist.h>
+#include <linux/delay.h>
 
 #define CREATE_TRACE_POINTS
 #include "trace.h"
 
 #include "nvmet.h"
 
+struct task_struct *resize_monitor;
 struct workqueue_struct *buffered_io_wq;
 static const struct nvmet_fabrics_ops *nvmet_transports[NVMF_TRTYPE_MAX];
 static DEFINE_IDA(cntlid_ida);
@@ -514,6 +516,49 @@ static void nvmet_p2pmem_ns_add_p2p(struct nvmet_ctrl *ctrl,
 		ns->nsid);
 }
 
+bool nvmet_ns_revalidate(struct nvmet_ns *ns)
+{
+	if (ns->bdev)
+		return nvmet_bdev_ns_revalidate(ns);
+
+	return nvmet_file_ns_revalidate(ns);
+}
+
+static void __nvmet_handle_resize_ns(struct nvmet_subsys *s)
+{
+	struct nvmet_ns *ns;
+
+	mutex_lock(&s->lock);
+	list_for_each_entry_rcu(ns, &s->namespaces, dev_link, 1) {
+		if (nvmet_ns_revalidate(ns))
+			nvmet_ns_changed(ns->subsys, ns->nsid);
+	}
+	mutex_unlock(&s->lock);
+}
+
+static int nvmet_ns_resize_monitor(void *data)
+{
+	struct completion *wait = data;
+	struct nvmet_subsys_link *link;
+	struct nvmet_port *port;
+
+	complete(wait);
+
+	while (!kthread_should_park()) {
+		down_read(&nvmet_config_sem);
+		list_for_each_entry(port, nvmet_ports, global_entry)
+			list_for_each_entry(link, &port->subsystems, entry)
+				__nvmet_handle_resize_ns(link->subsys);
+		up_read(&nvmet_config_sem);
+		schedule();
+		/* XXX: use better sleep wakeup mechanism */
+		msleep(100);
+	}
+
+	kthread_parkme();
+	return 0;
+}
+
 int nvmet_ns_enable(struct nvmet_ns *ns)
 {
 	struct nvmet_subsys *subsys = ns->subsys;
@@ -1480,17 +1525,55 @@ void nvmet_subsys_put(struct nvmet_subsys *subsys)
 	kref_put(&subsys->ref, nvmet_subsys_free);
 }
 
+bool nvmet_enable_ns_resize_monitor(void)
+{
+	DECLARE_COMPLETION_ONSTACK(wait);
+
+	if (resize_monitor)
+		goto out;
+
+	resize_monitor = kthread_create(nvmet_ns_resize_monitor, &wait,
+				       "nvmet_ns_resize");
+	if (resize_monitor) {
+		wake_up_process(resize_monitor);
+		wait_for_completion(&wait);
+		pr_debug("ns monitor thread started successfully\n");
+	}
+
+out:
+	return resize_monitor ? true : false;
+}
+
+bool nvmet_disable_ns_resize_monitor(void)
+{
+	bool ret = false;
+
+	if (resize_monitor)  {
+		kthread_park(resize_monitor);
+		kthread_stop(resize_monitor);
+		resize_monitor = NULL;
+		ret = true;
+	}
+
+	return ret;
+}
+
 static int __init nvmet_init(void)
 {
 	int error;
 
 	nvmet_ana_group_enabled[NVMET_DEFAULT_ANA_GRPID] = 1;
 
+	if (!nvmet_enable_ns_resize_monitor()) {
+		error = -ENOMEM;
+		goto out;
+	}
+
 	buffered_io_wq = alloc_workqueue("nvmet-buffered-io-wq",
 			WQ_MEM_RECLAIM, 0);
 	if (!buffered_io_wq) {
 		error = -ENOMEM;
-		goto out;
+		goto out_disable_resize_monitor;
 	}
 
 	error = nvmet_init_discovery();
@@ -1506,6 +1589,8 @@ static int __init nvmet_init(void)
 	nvmet_exit_discovery();
 out_free_work_queue:
 	destroy_workqueue(buffered_io_wq);
+out_disable_resize_monitor:
+	nvmet_disable_ns_resize_monitor();
 out:
 	return error;
 }
@@ -1516,6 +1601,7 @@ static void __exit nvmet_exit(void)
 	nvmet_exit_discovery();
 	ida_destroy(&cntlid_ida);
 	destroy_workqueue(buffered_io_wq);
+	nvmet_disable_ns_resize_monitor();
 
 	BUILD_BUG_ON(sizeof(struct nvmf_disc_rsp_page_entry) != 1024);
 	BUILD_BUG_ON(sizeof(struct nvmf_disc_rsp_page_hdr) != 1024);
diff --git a/drivers/nvme/target/io-cmd-bdev.c b/drivers/nvme/target/io-cmd-bdev.c
index 0427e040e3dd..3cca08e9ad90 100644
--- a/drivers/nvme/target/io-cmd-bdev.c
+++ b/drivers/nvme/target/io-cmd-bdev.c
@@ -75,9 +75,16 @@ void nvmet_bdev_ns_disable(struct nvmet_ns *ns)
 	}
 }
 
-void nvmet_bdev_ns_revalidate(struct nvmet_ns *ns)
+bool nvmet_bdev_ns_revalidate(struct nvmet_ns *ns)
 {
+	bool change;
+
+	lockdep_assert_held(&ns->subsys->lock);
+
+	change = ns->size != i_size_read(ns->bdev->bd_inode) ? true : false;
 	ns->size = i_size_read(ns->bdev->bd_inode);
+
+	return change;
 }
 
 static u16 blk_to_nvme_status(struct nvmet_req *req, blk_status_t blk_sts)
diff --git a/drivers/nvme/target/io-cmd-file.c b/drivers/nvme/target/io-cmd-file.c
index 14364383d2fe..a2d82e55858b 100644
--- a/drivers/nvme/target/io-cmd-file.c
+++ b/drivers/nvme/target/io-cmd-file.c
@@ -80,15 +80,20 @@ int nvmet_file_ns_enable(struct nvmet_ns *ns)
 	return ret;
 }
 
-void nvmet_file_ns_revalidate(struct nvmet_ns *ns)
+bool nvmet_file_ns_revalidate(struct nvmet_ns *ns)
 {
+	struct path *f_path = &ns->file->f_path;
+	bool change = false;
 	struct kstat stat;
 
-	if (vfs_getattr(&ns->file->f_path, &stat, STATX_SIZE,
-			AT_STATX_FORCE_SYNC))
-		return;
+	lockdep_assert_held(&ns->subsys->lock);
 
-	ns->size = stat.size;
+	if (vfs_getattr(f_path, &stat, STATX_SIZE, AT_STATX_FORCE_SYNC) == 0) {
+		change = ns->size != stat.size ? true : false;
+		ns->size = stat.size;
+	}
+
+	return change;
 }
 
 static void nvmet_file_init_bvec(struct bio_vec *bv, struct scatterlist *sg)
diff --git a/drivers/nvme/target/nvmet.h b/drivers/nvme/target/nvmet.h
index 8b479d932a7b..beae6cd07a79 100644
--- a/drivers/nvme/target/nvmet.h
+++ b/drivers/nvme/target/nvmet.h
@@ -50,6 +50,16 @@
 #define IPO_IATTR_CONNECT_SQE(x)	\
 	(cpu_to_le32(offsetof(struct nvmf_connect_command, x)))
 
+struct nvmet_control {
+	struct config_group	group;
+	bool 			enable;
+};
+
+static inline struct nvmet_control *to_nvmet_control(struct config_item *item)
+{
+	return container_of(to_config_group(item), struct nvmet_control, group);
+}
+
 struct nvmet_ns {
 	struct list_head	dev_link;
 	struct percpu_ref	ref;
@@ -498,8 +508,12 @@ void nvmet_file_ns_disable(struct nvmet_ns *ns);
 u16 nvmet_bdev_flush(struct nvmet_req *req);
 u16 nvmet_file_flush(struct nvmet_req *req);
 void nvmet_ns_changed(struct nvmet_subsys *subsys, u32 nsid);
-void nvmet_bdev_ns_revalidate(struct nvmet_ns *ns);
-void nvmet_file_ns_revalidate(struct nvmet_ns *ns);
+bool nvmet_bdev_ns_revalidate(struct nvmet_ns *ns);
+bool nvmet_file_ns_revalidate(struct nvmet_ns *ns);
+bool nvmet_ns_revalidate(struct nvmet_ns *ns);
+
+bool nvmet_enable_ns_resize_monitor(void);
+bool nvmet_disable_ns_resize_monitor(void);
 
 static inline u32 nvmet_rw_len(struct nvmet_req *req)
 {
-- 
2.22.1

