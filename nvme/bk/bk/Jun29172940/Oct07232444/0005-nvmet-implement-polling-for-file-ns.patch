From a8cebe82a2856cb3a7a82ad14ad1254a7dccece7 Mon Sep 17 00:00:00 2001
From: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
Date: Tue, 1 Oct 2019 20:24:18 -0700
Subject: [PATCH 5/6] nvmet: implement polling for file-ns

This patch implements polling for the file-backed NVMeOF target
namespace.

In the I/O submission code path, for each I/O request we queue the
polling work (nvmet_file_io_poll_work()) after submitting the kiocb and
return from the submission thread.

The new function nvmet_file_io_poll_work() runs in a tight loop calling
blk_poll() indirectly from the iocb's file operations->iopoll() followed
by the io_schedule().

In the I/O completion path, completion callback signals the polling work
routine about the completion of this I/O so that it can exit the loop.

By default we only enable polling for the READ/WRITE I/Os when we don't
set IOCB_NOWAIT and for direct I/O where we expect the async I/O
completion.

Signed-off-by: Chaitanya Kulkarni <chaitanya.kulkarni@wdc.com>
---
 drivers/nvme/target/io-cmd-file.c | 32 ++++++++++++++++++++++++++++---
 1 file changed, 29 insertions(+), 3 deletions(-)

diff --git a/drivers/nvme/target/io-cmd-file.c b/drivers/nvme/target/io-cmd-file.c
index 7171830cffbf..ab4d5e406d4d 100644
--- a/drivers/nvme/target/io-cmd-file.c
+++ b/drivers/nvme/target/io-cmd-file.c
@@ -121,6 +121,9 @@ static void nvmet_file_io_done(struct kiocb *iocb, long ret, long ret2)
 	struct nvmet_req *req = container_of(iocb, struct nvmet_req, f.iocb);
 	u16 status = NVME_SC_SUCCESS;
 
+	if (req->f.polled)
+		complete(&req->f.waiting);
+
 	if (req->f.bvec != req->inline_bvec) {
 		if (likely(req->f.mpool_alloc == false))
 			kfree(req->f.bvec);
@@ -133,8 +136,20 @@ static void nvmet_file_io_done(struct kiocb *iocb, long ret, long ret2)
 	nvmet_req_complete(req, status);
 }
 
+static void nvmet_file_io_poll_work(struct work_struct *w)
+{
+	struct nvmet_req *req = container_of(w, struct nvmet_req, f.work);
+	struct kiocb *iocb = &req->f.iocb;
+
+	while (!completion_done(&req->f.waiting)) {
+		iocb->ki_filp->f_op->iopoll(iocb, true);
+		io_schedule();
+	}
+}
+
 static bool nvmet_file_execute_io(struct nvmet_req *req, int ki_flags)
 {
+	struct kiocb *iocb = &req->f.iocb;
 	ssize_t nr_bvec = req->sg_cnt;
 	unsigned long bv_cnt = 0;
 	bool is_sync = false;
@@ -153,7 +168,7 @@ static bool nvmet_file_execute_io(struct nvmet_req *req, int ki_flags)
 		return true;
 	}
 
-	memset(&req->f.iocb, 0, sizeof(struct kiocb));
+	memset(iocb, 0, sizeof(struct kiocb));
 	for_each_sg(req->sg, sg, req->sg_cnt, i) {
 		nvmet_file_init_bvec(&req->f.bvec[bv_cnt], sg);
 		len += req->f.bvec[bv_cnt].bv_len;
@@ -189,13 +204,20 @@ static bool nvmet_file_execute_io(struct nvmet_req *req, int ki_flags)
 	 * A NULL ki_complete ask for synchronous execution, which we want
 	 * for the IOCB_NOWAIT case.
 	 */
-	if (!(ki_flags & IOCB_NOWAIT))
-		req->f.iocb.ki_complete = nvmet_file_io_done;
+	if (!(ki_flags & IOCB_NOWAIT)) {
+		iocb->ki_complete = nvmet_file_io_done;
+		req->f.polled = true;
+		init_completion(&req->f.waiting);
+		INIT_WORK(&req->f.work, nvmet_file_io_poll_work);
+	}
 
 	ret = nvmet_file_submit_bvec(req, pos, bv_cnt, total_len, ki_flags);
 
 	switch (ret) {
 	case -EIOCBQUEUED:
+		/* don't even try to poll if fs doesn't support polling */
+		if (iocb->ki_complete && iocb->ki_filp->f_op->iopoll)
+			queue_work(io_poll_wq, &req->f.work);
 		return true;
 	case -EAGAIN:
 		if (WARN_ON_ONCE(!(ki_flags & IOCB_NOWAIT)))
@@ -372,19 +394,23 @@ u16 nvmet_file_parse_io_cmd(struct nvmet_req *req)
 	switch (cmd->common.opcode) {
 	case nvme_cmd_read:
 	case nvme_cmd_write:
+		req->f.polled = false;
 		req->execute = nvmet_file_execute_rw;
 		req->data_len = nvmet_rw_len(req);
 		return 0;
 	case nvme_cmd_flush:
+		req->f.polled = false;
 		req->execute = nvmet_file_execute_flush;
 		req->data_len = 0;
 		return 0;
 	case nvme_cmd_dsm:
+		req->f.polled = false;
 		req->execute = nvmet_file_execute_dsm;
 		req->data_len = (le32_to_cpu(cmd->dsm.nr) + 1) *
 			sizeof(struct nvme_dsm_range);
 		return 0;
 	case nvme_cmd_write_zeroes:
+		req->f.polled = false;
 		req->execute = nvmet_file_execute_write_zeroes;
 		req->data_len = 0;
 		return 0;
-- 
2.22.1

