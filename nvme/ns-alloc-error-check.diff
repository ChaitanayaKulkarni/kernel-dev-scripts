diff --git a/drivers/nvme/host/core.c b/drivers/nvme/host/core.c
index f7bc808da3d0..a78b001c6510 100644
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@ -3917,7 +3917,7 @@ struct nvme_ns *nvme_find_get_ns(struct nvme_ctrl *ctrl, unsigned nsid)
 }
 EXPORT_SYMBOL_NS_GPL(nvme_find_get_ns, NVME_TARGET_PASSTHRU);
 
-static void nvme_alloc_ns(struct nvme_ctrl *ctrl, unsigned nsid,
+static int nvme_alloc_ns(struct nvme_ctrl *ctrl, unsigned nsid,
 		struct nvme_ns_ids *ids)
 {
 	struct nvme_ns *ns;
@@ -3925,18 +3925,23 @@ static void nvme_alloc_ns(struct nvme_ctrl *ctrl, unsigned nsid,
 	struct nvme_id_ns *id;
 	char disk_name[DISK_NAME_LEN];
 	int node = ctrl->numa_node, flags = GENHD_FL_EXT_DEVT;
+	int ret;
 
-	if (nvme_identify_ns(ctrl, nsid, ids, &id))
-		return;
+	ret = nvme_identify_ns(ctrl, nsid, ids, &id);
+	if (ret)
+		return ret;
 
 	ns = kzalloc_node(sizeof(*ns), GFP_KERNEL, node);
-	if (!ns)
+	if (!ns) {
+		ret = -ENOMEM;
 		goto out_free_id;
+	}
 
 	ns->queue = blk_mq_init_queue(ctrl->tagset);
-	if (IS_ERR(ns->queue))
+	if (IS_ERR(ns->queue)) {
+		ret = PTR_ERR(ns->queue);
 		goto out_free_ns;
-
+	}
 	if (ctrl->opts && ctrl->opts->data_digest)
 		blk_queue_flag_set(QUEUE_FLAG_STABLE_WRITES, ns->queue);
 
@@ -3948,13 +3953,17 @@ static void nvme_alloc_ns(struct nvme_ctrl *ctrl, unsigned nsid,
 	ns->ctrl = ctrl;
 	kref_init(&ns->kref);
 
-	if (nvme_init_ns_head(ns, nsid, ids, id->nmic & NVME_NS_NMIC_SHARED))
+	if (nvme_init_ns_head(ns, nsid, ids, id->nmic & NVME_NS_NMIC_SHARED)) {
+		ret = -EINVAL;
 		goto out_free_queue;
+	}
 	nvme_set_disk_name(disk_name, ns, ctrl, &flags);
 
 	disk = alloc_disk_node(0, node);
-	if (!disk)
+	if (!disk) {
+		ret = -ENOMEM;
 		goto out_unlink_ns;
+	}
 
 	disk->fops = &nvme_bdev_ops;
 	disk->private_data = ns;
@@ -3963,12 +3972,14 @@ static void nvme_alloc_ns(struct nvme_ctrl *ctrl, unsigned nsid,
 	memcpy(disk->disk_name, disk_name, DISK_NAME_LEN);
 	ns->disk = disk;
 
-	if (nvme_update_ns_info(ns, id))
+	ret = nvme_update_ns_info(ns, id);
+	if (ret)
 		goto out_put_disk;
 
 	if ((ctrl->quirks & NVME_QUIRK_LIGHTNVM) && id->vs[0] == 0x1) {
 		if (nvme_nvm_register(ns, disk_name, node)) {
 			dev_warn(ctrl->device, "LightNVM init failure\n");
+			ret = -EINVAL;
 			goto out_put_disk;
 		}
 	}
@@ -3985,7 +3996,7 @@ static void nvme_alloc_ns(struct nvme_ctrl *ctrl, unsigned nsid,
 	nvme_fault_inject_init(&ns->fault_inject, ns->disk->disk_name);
 	kfree(id);
 
-	return;
+	return 0;
  out_put_disk:
 	/* prevent double queue cleanup */
 	ns->disk->queue = NULL;
@@ -4003,6 +4014,7 @@ static void nvme_alloc_ns(struct nvme_ctrl *ctrl, unsigned nsid,
 	kfree(ns);
  out_free_id:
 	kfree(id);
+	return ret;
 }
 
 static void nvme_ns_remove(struct nvme_ns *ns)
@@ -4082,25 +4094,26 @@ static void nvme_validate_ns(struct nvme_ns *ns, struct nvme_ns_ids *ids)
 		nvme_ns_remove(ns);
 }
 
-static void nvme_validate_or_alloc_ns(struct nvme_ctrl *ctrl, unsigned nsid)
+static int nvme_validate_or_alloc_ns(struct nvme_ctrl *ctrl, unsigned nsid)
 {
 	struct nvme_ns_ids ids = { };
 	struct nvme_ns *ns;
+	int ret;
 
-	if (nvme_identify_ns_descs(ctrl, nsid, &ids))
-		return;
+	ret = nvme_identify_ns_descs(ctrl, nsid, &ids);
+	if (ret)
+		return ret;
 
 	ns = nvme_find_get_ns(ctrl, nsid);
 	if (ns) {
 		nvme_validate_ns(ns, &ids);
 		nvme_put_ns(ns);
-		return;
+		return 0;
 	}
 
 	switch (ids.csi) {
 	case NVME_CSI_NVM:
-		nvme_alloc_ns(ctrl, nsid, &ids);
-		break;
+		return nvme_alloc_ns(ctrl, nsid, &ids);
 	case NVME_CSI_ZNS:
 		if (!IS_ENABLED(CONFIG_BLK_DEV_ZONED)) {
 			dev_warn(ctrl->device,
@@ -4112,15 +4125,13 @@ static void nvme_validate_or_alloc_ns(struct nvme_ctrl *ctrl, unsigned nsid)
 			dev_warn(ctrl->device,
 				"command set not reported for nsid: %d\n",
 				ns->head->ns_id);
-			break;
+			return -EINVAL;
 		}
-		nvme_alloc_ns(ctrl, nsid, &ids);
-		break;
-	default:
-		dev_warn(ctrl->device, "unknown csi %u for nsid %u\n",
-			ids.csi, nsid);
-		break;
+		return nvme_alloc_ns(ctrl, nsid, &ids);
 	}
+
+	dev_warn(ctrl->device, "unknown csi %u for nsid %u\n", ids.csi, nsid);
+	return -EINVAL;
 }
 
 static void nvme_remove_invalid_namespaces(struct nvme_ctrl *ctrl,
@@ -4175,32 +4186,45 @@ static int nvme_scan_ns_list(struct nvme_ctrl *ctrl)
 
 			if (!nsid)	/* end of the list? */
 				goto out;
-			nvme_validate_or_alloc_ns(ctrl, nsid);
+			ret = nvme_validate_or_alloc_ns(ctrl, nsid);
 			while (++prev < nsid)
 				nvme_ns_remove_by_nsid(ctrl, prev);
+			if (ret)
+				break;
 		}
 	}
+
  out:
 	nvme_remove_invalid_namespaces(ctrl, prev);
  free:
 	kfree(ns_list);
+
+	if (ret)
+		nvme_delete_ctrl(ctrl);
 	return ret;
 }
 
-static void nvme_scan_ns_sequential(struct nvme_ctrl *ctrl)
+static int nvme_scan_ns_sequential(struct nvme_ctrl *ctrl)
 {
 	struct nvme_id_ctrl *id;
 	u32 nn, i;
+	int ret = 0;
+
+	ret = nvme_identify_ctrl(ctrl, &id);
+	if (ret)
+		return ret;
 
-	if (nvme_identify_ctrl(ctrl, &id))
-		return;
 	nn = le32_to_cpu(id->nn);
 	kfree(id);
 
-	for (i = 1; i <= nn; i++)
-		nvme_validate_or_alloc_ns(ctrl, i);
+	for (i = 1; i <= nn; i++) {
+		ret = nvme_validate_or_alloc_ns(ctrl, i);
+		if (ret)
+			break;
+	}
 
 	nvme_remove_invalid_namespaces(ctrl, nn);
+	return ret;
 }
 
 static void nvme_clear_changed_ns_log(struct nvme_ctrl *ctrl)
