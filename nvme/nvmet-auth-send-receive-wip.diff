diff --git a/drivers/nvme/target/fabrics-cmd-auth.c b/drivers/nvme/target/fabrics-cmd-auth.c
index 6c9a1ce6068d..75144cb94439 100644
--- a/drivers/nvme/target/fabrics-cmd-auth.c
+++ b/drivers/nvme/target/fabrics-cmd-auth.c
@@ -185,31 +185,24 @@ void nvmet_execute_auth_send(struct nvmet_req *req)
 	struct nvmf_auth_dhchap_success2_data *data;
 	void *d;
 	u32 tl;
-	u16 status = 0;
+	int *dhchap_step = &req->sq->dhchap_step;
+	u16 status = NVME_SC_INVALID_FIELD | NVME_SC_DNR;
 
 	if (req->cmd->auth_send.secp != NVME_AUTH_DHCHAP_PROTOCOL_IDENTIFIER) {
-		status = NVME_SC_INVALID_FIELD | NVME_SC_DNR;
-		req->error_loc =
-			offsetof(struct nvmf_auth_send_command, secp);
+		req->error_loc = offsetof(struct nvmf_auth_send_command, secp);
 		goto done;
 	}
 	if (req->cmd->auth_send.spsp0 != 0x01) {
-		status = NVME_SC_INVALID_FIELD | NVME_SC_DNR;
-		req->error_loc =
-			offsetof(struct nvmf_auth_send_command, spsp0);
+		req->error_loc = offsetof(struct nvmf_auth_send_command, spsp0);
 		goto done;
 	}
 	if (req->cmd->auth_send.spsp1 != 0x01) {
-		status = NVME_SC_INVALID_FIELD | NVME_SC_DNR;
-		req->error_loc =
-			offsetof(struct nvmf_auth_send_command, spsp1);
+		req->error_loc = offsetof(struct nvmf_auth_send_command, spsp1);
 		goto done;
 	}
 	tl = le32_to_cpu(req->cmd->auth_send.tl);
 	if (!tl) {
-		status = NVME_SC_INVALID_FIELD | NVME_SC_DNR;
-		req->error_loc =
-			offsetof(struct nvmf_auth_send_command, tl);
+		req->error_loc = offsetof(struct nvmf_auth_send_command, tl);
 		goto done;
 	}
 	if (!nvmet_check_transfer_len(req, tl)) {
@@ -230,7 +223,7 @@ void nvmet_execute_auth_send(struct nvmet_req *req)
 	data = d;
 	pr_debug("%s: ctrl %d qid %d type %d id %d step %x\n", __func__,
 		 ctrl->cntlid, req->sq->qid, data->auth_type, data->auth_id,
-		 req->sq->dhchap_step);
+		 *dhchap_step);
 	if (data->auth_type != NVME_AUTH_COMMON_MESSAGES &&
 	    data->auth_type != NVME_AUTH_DHCHAP_MESSAGES)
 		goto done_failure1;
@@ -248,26 +241,24 @@ void nvmet_execute_auth_send(struct nvmet_req *req)
 					goto done_failure1;
 				}
 			}
-			req->sq->dhchap_step = NVME_AUTH_DHCHAP_MESSAGE_NEGOTIATE;
-		} else if (data->auth_id != req->sq->dhchap_step)
+			*dhchap_step = NVME_AUTH_DHCHAP_MESSAGE_NEGOTIATE;
+		} else if (data->auth_id != *dhchap_step)
 			goto done_failure1;
 		/* Validate negotiation parameters */
 		status = nvmet_auth_negotiate(req, d);
 		if (status == 0)
-			req->sq->dhchap_step =
-				NVME_AUTH_DHCHAP_MESSAGE_CHALLENGE;
+			*dhchap_step = NVME_AUTH_DHCHAP_MESSAGE_CHALLENGE;
 		else {
-			req->sq->dhchap_step =
-				NVME_AUTH_DHCHAP_MESSAGE_FAILURE1;
+			*dhchap_step =NVME_AUTH_DHCHAP_MESSAGE_FAILURE1;
 			req->sq->dhchap_status = status;
 			status = 0;
 		}
 		goto done_kfree;
 	}
-	if (data->auth_id != req->sq->dhchap_step) {
+	if (data->auth_id != *dhchap_step) {
 		pr_debug("%s: ctrl %d qid %d step mismatch (%d != %d)\n",
 			 __func__, ctrl->cntlid, req->sq->qid,
-			 data->auth_id, req->sq->dhchap_step);
+			 data->auth_id, *dhchap_step);
 		goto done_failure1;
 	}
 	if (le16_to_cpu(data->t_id) != req->sq->dhchap_tid) {
@@ -275,8 +266,7 @@ void nvmet_execute_auth_send(struct nvmet_req *req)
 			 __func__, ctrl->cntlid, req->sq->qid,
 			 le16_to_cpu(data->t_id),
 			 req->sq->dhchap_tid);
-		req->sq->dhchap_step =
-			NVME_AUTH_DHCHAP_MESSAGE_FAILURE1;
+		*dhchap_step = NVME_AUTH_DHCHAP_MESSAGE_FAILURE1;
 		req->sq->dhchap_status =
 			NVME_AUTH_DHCHAP_FAILURE_INCORRECT_PAYLOAD;
 		goto done_kfree;
@@ -286,11 +276,9 @@ void nvmet_execute_auth_send(struct nvmet_req *req)
 	case NVME_AUTH_DHCHAP_MESSAGE_REPLY:
 		status = nvmet_auth_reply(req, d);
 		if (status == 0)
-			req->sq->dhchap_step =
-				NVME_AUTH_DHCHAP_MESSAGE_SUCCESS1;
+			*dhchap_step = NVME_AUTH_DHCHAP_MESSAGE_SUCCESS1;
 		else {
-			req->sq->dhchap_step =
-				NVME_AUTH_DHCHAP_MESSAGE_FAILURE1;
+			*dhchap_step = NVME_AUTH_DHCHAP_MESSAGE_FAILURE1;
 			req->sq->dhchap_status = status;
 			status = 0;
 		}
@@ -313,29 +301,28 @@ void nvmet_execute_auth_send(struct nvmet_req *req)
 	default:
 		req->sq->dhchap_status =
 			NVME_AUTH_DHCHAP_FAILURE_INCORRECT_MESSAGE;
-		req->sq->dhchap_step =
-			NVME_AUTH_DHCHAP_MESSAGE_FAILURE2;
+		*dhchap_step = NVME_AUTH_DHCHAP_MESSAGE_FAILURE2;
 		req->sq->authenticated = false;
 		goto done_kfree;
 	}
 done_failure1:
 	req->sq->dhchap_status = NVME_AUTH_DHCHAP_FAILURE_INCORRECT_MESSAGE;
-	req->sq->dhchap_step = NVME_AUTH_DHCHAP_MESSAGE_FAILURE2;
+	*dhchap_step = NVME_AUTH_DHCHAP_MESSAGE_FAILURE2;
 
 done_kfree:
 	kfree(d);
 done:
 	pr_debug("%s: ctrl %d qid %d dhchap status %x step %x\n", __func__,
-		 ctrl->cntlid, req->sq->qid,
-		 req->sq->dhchap_status, req->sq->dhchap_step);
+		 ctrl->cntlid, req->sq->qid, req->sq->dhchap_status,
+		 *dhchap_step);
 	if (status)
 		pr_debug("%s: ctrl %d qid %d nvme status %x error loc %d\n",
 			 __func__, ctrl->cntlid, req->sq->qid,
 			 status, req->error_loc);
 	req->cqe->result.u64 = 0;
 	nvmet_req_complete(req, status);
-	if (req->sq->dhchap_step != NVME_AUTH_DHCHAP_MESSAGE_SUCCESS2 &&
-	    req->sq->dhchap_step != NVME_AUTH_DHCHAP_MESSAGE_FAILURE2) {
+	if (*dhchap_step != NVME_AUTH_DHCHAP_MESSAGE_SUCCESS2 &&
+	    *dhchap_step != NVME_AUTH_DHCHAP_MESSAGE_FAILURE2) {
 		unsigned long auth_expire_secs = ctrl->kato ? ctrl->kato : 120;
 
 		mod_delayed_work(system_wq, &req->sq->auth_expired_work,
@@ -344,7 +331,7 @@ void nvmet_execute_auth_send(struct nvmet_req *req)
 	}
 	/* Final states, clear up variables */
 	nvmet_auth_sq_free(req->sq);
-	if (req->sq->dhchap_step == NVME_AUTH_DHCHAP_MESSAGE_FAILURE2)
+	if (*dhchap_step == NVME_AUTH_DHCHAP_MESSAGE_FAILURE2)
 		nvmet_ctrl_fatal_error(ctrl);
 }
 
@@ -432,31 +419,25 @@ void nvmet_execute_auth_receive(struct nvmet_req *req)
 	struct nvmet_ctrl *ctrl = req->sq->ctrl;
 	void *d;
 	u32 al;
-	u16 status = 0;
+	u16 *error_loc = &req->error_loc;
+	int *dhchap_step = &req->sq->dhchap_step;
+	u16 status = NVME_SC_INVALID_FIELD | NVME_SC_DNR;
 
 	if (req->cmd->auth_receive.secp != NVME_AUTH_DHCHAP_PROTOCOL_IDENTIFIER) {
-		status = NVME_SC_INVALID_FIELD | NVME_SC_DNR;
-		req->error_loc =
-			offsetof(struct nvmf_auth_receive_command, secp);
+		*error_loc = offsetof(struct nvmf_auth_receive_command, secp);
 		goto done;
 	}
 	if (req->cmd->auth_receive.spsp0 != 0x01) {
-		status = NVME_SC_INVALID_FIELD | NVME_SC_DNR;
-		req->error_loc =
-			offsetof(struct nvmf_auth_receive_command, spsp0);
+		*error_loc = offsetof(struct nvmf_auth_receive_command, spsp0);
 		goto done;
 	}
 	if (req->cmd->auth_receive.spsp1 != 0x01) {
-		status = NVME_SC_INVALID_FIELD | NVME_SC_DNR;
-		req->error_loc =
-			offsetof(struct nvmf_auth_receive_command, spsp1);
+		*error_loc = offsetof(struct nvmf_auth_receive_command, spsp1);
 		goto done;
 	}
 	al = le32_to_cpu(req->cmd->auth_receive.al);
 	if (!al) {
-		status = NVME_SC_INVALID_FIELD | NVME_SC_DNR;
-		req->error_loc =
-			offsetof(struct nvmf_auth_receive_command, al);
+		*error_loc = offsetof(struct nvmf_auth_receive_command, al);
 		goto done;
 	}
 	if (!nvmet_check_transfer_len(req, al)) {
